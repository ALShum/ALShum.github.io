c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
g
params
params[1,] = c(15, 3)
params[2,] = c(40, 40)
params[3,] = c(3, 25)
#stores groups
g = rep(0, 450)
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
g
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
g
params
params[1,] = c(15, 3)
params[2,] = c(40, 40)
params[3,] = c(3, 25)
params
g
g = rep(0, 450)
g
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
g
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
params
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
g
params
getwd()
cite
cite("MASS")
cite
cite(ggplot2)
cite("ggplot2")
cite(package="mass")
cite(package="MASS")
cite(package="base")
citation(package="MASS")
part = c(rep(1, 6), rep(2, 6), rep(3, 6), rep(4, 6))
op = rep(c(1,1,2,2,3,3), 4)
m = c(.52, .52, .54, .53,
.55, .55, .56, .55,
.54, .54, .55, .56,
.57, .56, .55, .56,
.57, .57, .55, .55,
.54, .55, .56, .55)
dat = data.frame(part = part, operator = op, peanut = m)
dat
lm(peanut ~ as.factor(operator) + as.factor(part), data = dat)
q = lm(peanut ~ as.factor(operator) + as.factor(part), data = dat)
summary(q)
anova(q)
dat
str(dat)
part = c(rep(1, 6), rep(2, 6), rep(3, 6), rep(4, 6))
op = rep(c(1,1,2,2,3,3), 4)
m = c(.52, .52, .54, .53,
.55, .55, .56, .55,
.54, .54, .55, .56,
.57, .56, .55, .56,
.57, .57, .55, .55,
.54, .55, .56, .55)
dat = data.frame(part = part, operator = op, peanut = m)
dat$part = as.factor(dat$part)
dat$operator = as.factor(dat$operator)
dat
g = lm(peanut ~ part + operator)
g = lm(peanut ~ part + operator, data = dat)
g
anova(g)
g = lm(peanut ~ part*operator, data = dat)
anova(g)
devtools::install_github("rstudio/rmarkdown")
library(dplyr)
devtools::install_github(c("rstudio/rmarkdown", "rstudio/ggvis"),
build_vignettes = FALSE)
devtools::install_github("hadley/dplyr")
%>%
group_by()
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
?ggvis::add_legend
67^1.12
67^1.12 * 3
efford = 67 ^ 1.12 * 3
effort = 67 ^ 1.12 * 3
duration = 2.5 * effort ^ 0.35
duration
effort
effort / duration
17*19*10000
effort * 10000
17.441 * 19.08771 * 10000
87 ^ 1.05 * 2.4
87000/261.0396
87000/261.0396 / 30
87000/(261.0396 / 30)
87000/(261.0396)
87000/(261.0396) / 20
PM = 3.6 * 99 ^ 1.2
PM
(99000 / PM) / 20
87000 / (87 ^ 1.05 * 2.4)
333.2827/20
PM = 2.4 * 250^1.05
PM
TDEV = 2.5 * PM ^0.38
TDEV
PM / TDEV
99 ^ 1.2 * 3.6
PM = 99 ^ 1.2 * 3.6
99000 / PM
(99000 / PM)/ 20
PM = 250 ^ 1.05 * 2.4
PM
choose(5,2)
choose(3,0)
0!
factorial(0)
test = function(t) {choose(t - 1, t - 4) * 0.5 ^ t }
test(3)
test(4)
0.5^4
test(4) + test(5) + test(6) + test(7) + test(8)
test(8)
choose(8, 4) * 0.5^8
choose(8, 4) * 0.5^8 + choose(8, 5) * 0.5^8 + choose(8, 6) * 0.5^8 + choose(8, 7) * 0.5^8   + choose(8, 8) * 0.5^8
install.packages("wordcloud")
library(wordcloud)
help(wordcloud)
wordcloud
wordcloud("The various commands are self-explanatory: strip unnecessary white space, convert everything to lower case (otherwise the wordcloud might highlight capitalised words separately), remove English common words like ‘the’ (so-called ‘stopwords’), and carry out text stemming for the final tidy-up. Depending on what you want to achieve you could also explicitly remove numbers and punctuation with the removeNumbers and removePunctuation arguments.")
library("tm")
install.packages("tm")
getwd()
setwd("~/GitHub/ALShum.github.io")
test = Corpus(DirSource(getwd()))
test = orpus(DirSource(getwd()))
test = corpus(DirSource(getwd()))
library(tm)
test = corpus(DirSource(getwd()))
test = Corpus(DirSource(getwd()))
inspect(test)
test = Corpus(DirSource(paste0(getwd(), "/", "classes.md"))
)
paste0(getwd(), "/", "classes.md")
test = Corpus(paste0(getwd(), "/", "classes.md")
)
head(Corpus)
help(Corpus)
test = Corpus(DirSource(system.file("classes.md")))
test = Corpus(DirSource(paste0(getwd(), "/", "classes.md"))
test = Corpus(DirSource(paste0(getwd(), "/", "classes.md")))
test = Corpus(DirSource(getwd()))
test = tm_map(test, stripWhitespace)
test = tm_map(test, tolower)
test = tm_map(test, removeWords, stopwords("english"))
test = tm_map(test, stemDocument)
install.package("SnowballC")
install.packages("SnowballC")
test = tm_map(test, removeWords, stopwords("english"))
inspect(test)
library(wordcloud)
wordcloud("hello")
wordcloud(c("hello", "test"))
readLines
readLines("./")
getwd()
readLines("class.md")
readLines("classes.md")
test = sapply(text, function(x){
if(nchar(x) > 0) return(x)
})
head(test)
test
grep
grep(".", text)
text = readLines("classes.md")
head(text)
text
text > 1
text[text > 1]
text = grep(".", text)[-1:6]
text = readLines("classes.md")
text = grep(".", text)
head(text)
text
text = readLines("classes.md")
text = text[grep(".", text)]
text = text[-1:6]
text = readLines("classes.md")
text = text[grep(".", text)]
head(text)
text
text = text[grep(".", text)]
text
grep(".", text)
text = grep(".", text)
head(text)
grep(".", text)
head(text)
text = readLines("classes.md")
text = text[grep(".", text)]
head(text)
nchar(text)
text = readLines("classes.md")
nchar(text)
text = text[nchar(text) > 4]
text
head(text)
grep("**", text)
grep
grep("\*\*", text)
grep("\\*\\*", text)
text[grep("\\*\\*", text)]
text[grep("^\\*\\*", text)]
text[grep("^[\\*\\*]", text)]
text[grep("\\*\\*", text)]
text[!grep("\\*\\*", text)]
text[grep("\\*\\*", text)]
grep("\\*\\*", text)
!grep("\\*\\*", text)
grep("\\*\\*", text)
grep("[^\\*\\*]", text)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("[^\\*\\*]", text)]
text
text
grep("[^\\*\\*]", text)
grep("[^\\*\\*]", text)
grep("[\\*\\*]", text)
grep("^[\\*\\*]", text)
grep("^[^\\*\\*]", text)
grep("[^\\*\\*]", text)
grep("^[^\\*\\*]", text)
text[grep("^[^\\*\\*]", text)]
grep("^[^\\#\\#", text)
grep("^[^\\#\\#]", text)
text[grep("^[^\\#\\#]", text)]
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[-c(1:6)]
text
text = text[grep("^[^--]", text)]
text
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:6, 14)]
text
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text
library(wordcloud)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
head(text)
text
strsplit(text)
strsplit(text, "")
strsplit(text, " ")
do.call(strsplit(text, " "), rbind)
do.call(rbind, strsplit(text, " "))
strsplit(text, " ")
do.call(c(), strsplit(text, " "))
do.call(cbind, strsplit(text, " "))
text = do.call(cbind, strsplit(text, " "))
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = do.call(cbind, strsplit(text, " "))
dim(text)
101 * 15
dim(text) = c(1515, 1)
head(text)
text
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = do.call(cbind, strsplit(text, " "))
as.vector(text)
library(wordcloud)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text
text = text[nchar(text) > 0]
text
wordcloud(text)
wordcloud(text, scale = c(0, 0.5), max.words = 100, random.order = FALSE, rot.per = 0.35, use.r.layout=FALSE, colors = brewer.pal(8, "dark2"))
wordcloud(text, scale = c(0, 0.5), max.words = 100, random.order = FALSE, rot.per = 0.35, use.r.layout=FALSE, colors = brewer.pal(8, "Dark2"))
wordcloud(text, colors = brewer.pal(8, "Dark2"))
wordcloud(text, scale = c(0, 0.5), max.words = 100, random.order = FALSE, use.r.layout=FALSE, colors = brewer.pal(8, "Dark2"))
wordcloud(text, scale = c(0, 0.5), max.words = 100, random.order = FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(text, max.words = 100, random.order = FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(text, max.words = 50, random.order = FALSE, rot.per = 0.35, use.r.layout=FALSE, colors = brewer.pal(8, "Dark2"))
text = readLines("ISL.txt")
setwd("~/GitHub/ALShum.github.io/knitr")
text = readLines("ISL.txt")
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
text
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
text
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
wordcloud(text)
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
wordcloud(text)
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
wordcloud(text)
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
wordcloud(text)
text = Corpus(DirSource("ISL.txt"))
text = tm_map(text, stripWhitespace)
text = tm_map(text, tolower)
text = tm_map(text, removeWords, stopwords("english"))
text = tm_map(text, stemDocument)
text = Corpus(DirSource("./"))
text = tm_map(text, stripWhitespace)
text = tm_map(text, tolower)
text = tm_map(text, removeWords, stopwords("english"))
text = tm_map(text, stemDocument)
wordcloud(text)
text = readLines("ISL.txt")
text = paste(text, collapse = " ")
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
library(wordcloud)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text = text[nchar(text) > 0]
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
library(wordcloud)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text = text[nchar(text) > 0]
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text = text[nchar(text) > 0]
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
library(wordcloud)
library(tm)
text = readLines("classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text = text[nchar(text) > 0]
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
text = readLines("classes.md")
text = text[nchar(text) > 4]
library(wordcloud)
text = readLines("../classes.md")
text = text[nchar(text) > 4]
text = text[grep("^[^\\*\\*]", text)]
text = text[grep("^[^\\#\\#]", text)]
text = text[grep("^[^--]", text)]
text = text[-c(1:5, 19)]
text = as.vector(do.call(cbind, strsplit(text, " ")))
text = text[nchar(text) > 0]
wordcloud(text,
max.words = 50,
random.order = FALSE,
rot.per = 0.35,
use.r.layout=FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(text,
max.words = 75,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
