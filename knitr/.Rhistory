groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines() %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke:="red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines() %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups, alpha := 0.5) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
help(ggvis)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines() %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups, opacity := 0.5) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines(opacity := 0.4) %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines(opacity := 0.4, strike_width := 2) %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines(opacity := 0.4, strikeWidth := 2) %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
library(shiny)
library(ggvis)
#simple linear regression
#global variable.  sorry.
SAMPLE_SIZE = 15
wgt_regression = function(x, y) {
df = data.frame(x = x, y = y)
if(SAMPLE_SIZE > nrow(df)) stop("Sample size cannot be bigger than dataset")
if(!is.numeric(x) || !is.numeric(y)) stop("both variables must be numeric!")
m = lm(y ~ x)
x_min = min(x)
x_max = max(x)
print(y)
#begin shiny
shinyApp(
ui = fluidPage(
responsive = FALSE,
fluidRow(
column(
width = 3,
wellPanel(
#control elements
actionButton("sample", label = "Resample!")
)
),
column(
width = 9,
ggvisOutput("gg_vis")
)
)
), #ui
#SERVER
server = function(input, output, session) {
sample_df = reactiveValues(lines = data.frame(x = c(x_min, x_max),  y = coef(m)[1] + coef(m)[2]*c(x_min, x_max), group = c(0,0)))
observe({
print(rct_calculate_line())
})
#partitions dataset into two groups (group 0 and 1)
rct_get_sample = reactive({
input$sample
isolate({
groups = rep(0, nrow(df))
groups[sample(1:length(groups), SAMPLE_SIZE)] = 1
df2 = data.frame(x = df$x, y = df$y, groups = groups)
df2
})
})
#returns only the points that have group == 1
rct_get = reactive({
rct_get_sample() %>% filter(groups > 0)
})
#calculates and remembers the line
rct_calculate_line = reactive({
input$sample
isolate({
data = rct_get_sample() %>% filter(groups > 0)
if(nrow(data) > 1 & input$sample > 0) {
m2 = lm(data$y ~ data$x)
new_coef = data.frame(x = c(x_min, x_max),
y = coef(m2)[1] + coef(m2)[2]*c(x_min, x_max),
group = c(0,0) + input$sample)
sample_df$lines = rbind(sample_df$lines, new_coef)
}
sample_df$lines
})
})
rct_calculate_line %>%
ggvis(x = ~x, y = ~y) %>%
group_by(group) %>% layer_lines(opacity := 0.4, strokeWidth := 2) %>%
add_data(rct_get_sample) %>%
layer_points(x = ~x, y = ~y, fill = ~groups) %>%
add_data(rct_get) %>%
layer_model_predictions(model = "lm", formula = y ~ x, stroke := "red") %>%
bind_shiny("gg_vis")
}
)#shinyApp
}
wgt_regression(mtcars$hp, mtcars$mpg)
df = data.frame("hello world", 5, FALSE)
df
c("hello", 5, FALSE)
setwd("~/GitHub/ALShum.github.io/knitr")
knit("2014-08-07-nse.Rmd")
library(knitr)
knit("2014-08-07-nse.Rmd")
