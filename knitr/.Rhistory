params[i, ] = par
}
params
qplot(a)
g = c(rep(1,200), rep(2, 150), rep(3, 100))
test = data.frame(dat = dat, g = g)
test
qplot(dat, color = g, data = dat)
qplot(dat, color = as.factor(g), data = dat)
dat
qplot(dat, color = as.factor(g), data = dat, geom="histogram")
dat
qplot(dat, color = as.factor(g), data = test, geom="histogram")
qplot(dat, fill = as.factor(g), data = test, geom="histogram", alpha = I(0.2))
qplot(dat, fill = as.factor(g), data = test, geom="histogram", alpha = I(0.3))
qplot(dat, fill = as.factor(g), data = test, geom="histogram", alpha = I(0.5))
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 1, 1)
b = rbeta(150, 3, 80)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 1, 1)
b = rbeta(150, 3, 4)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 1, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 70, 70)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 70, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 30, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#LLfunc
LLBeta = function(params, dat) {
sumLogX = sum(log(  dat  ))
sumLogOneMinusX = sum(log(1 - dat))
n = length(dat)
toReturn = (params[1] - 1) * sumLogX + (params[2] - 1) *
sumLogOneMinusX - n * log(beta(params[1], params[2]))
return(-toReturn)
}
optim(c(10,10), LLBeta, dat = a)
optim(c(10,10), LLBeta, dat = a)
optim(c(10,10), LLBeta, dat = v)
optim(c(10,10), LLBeta, dat = b)
optim(c(10,10), LLBeta, dat = c)
g = c(rep(1,200), rep(2, 150), rep(3, 100))
params = matrix(rep(0, 6), nrow = 3)
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
params
##recalculate group assignment
for(i in length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
g
g
g = (((1:450)-1) %% 3) + 1
g
##calculate group parameters
params = matrix(rep(0, 6), nrow = 3)
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
params
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
clear(dat)
clr(dat)
free
dat = 0
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
dat
dim(dat)
length(dat)
qplot(a)
qplot(b)
qplot(c)
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
g = c(rep(1, 200), rep(2, 150), rep(3, 100))
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
g = c(rep(1, 200), rep(2, 150), rep(3, 100))
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#LLfunc
LLBeta = function(params, dat) {
sumLogX = sum(log(  dat  ))
sumLogOneMinusX = sum(log(1 - dat))
n = length(dat)
toReturn = (params[1] - 1) * sumLogX + (params[2] - 1) *
sumLogOneMinusX - n * log(beta(params[1], params[2]))
return(-toReturn)
}
optim(c(10,10), LLBeta, dat = a)
optim(c(10,10), LLBeta, dat = a)
optim(c(10,10), LLBeta, dat = b)
optim(c(10,10), LLBeta, dat = c)
params[1,] = optim(c(10,10), LLBeta, dat = a)
params[2,] = optim(c(10,10), LLBeta, dat = b)
params[3,] = optim(c(10,10), LLBeta, dat = c)
params[1,]
params = matrix(rep(0, 6), nrow = 3)
params[1,] = optim(c(10,10), LLBeta, dat = a)$par
params[2,] = optim(c(10,10), LLBeta, dat = b)$par
params[3,] = optim(c(10,10), LLBeta, dat = c)$par
params
#stores groups
g = rep(0, 450)
##recalculate group assignment
for(i in length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
g
length(dat)
##recalculate group assignment
for(i in length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
print(a)
print(b)
print(c)
g[i] = which.max(c(a,b,c))
}
g
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
g
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
g
#initial group parameters
params = matrix(rep(0, 6), nrow = 3)
params[1,] = optim(c(10,10), LLBeta, dat = a)$par
params[2,] = optim(c(10,10), LLBeta, dat = b)$par
params[3,] = optim(c(10,10), LLBeta, dat = c)$par
#stores groups
g = rep(0, 450)
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
params
g
#LLfunc
LLBeta = function(params, dat) {
sumLogX = sum(log(  dat  ))
sumLogOneMinusX = sum(log(1 - dat))
n = length(dat)
toReturn = (params[1] - 1) * sumLogX + (params[2] - 1) *
sumLogOneMinusX - n * log(beta(params[1], params[2]))
return(-toReturn)
}
optim(c(10,10), LLBeta, dat = a)
#initial group parameters
params = matrix(rep(0, 6), nrow = 3)
params[1,] = optim(c(10,10), LLBeta, dat = a)$par
params[2,] = optim(c(10,10), LLBeta, dat = b)$par
params[3,] = optim(c(10,10), LLBeta, dat = c)$par
#stores groups
g = rep(0, 450)
g
#initial group parameters
params = matrix(rep(0, 6), nrow = 3)
params[1,] = optim(c(10,10), LLBeta, dat = a)$par
params[2,] = optim(c(10,10), LLBeta, dat = b)$par
params[3,] = optim(c(10,10), LLBeta, dat = c)$par
#generate data
set.seed(100)
a = rbeta(200, 20, 1)
b = rbeta(150, 30, 30)
c = rbeta(100, 5, 30)
dat = c(a,b,c)
#plot data
g = c(rep(1, 200), rep(2, 150), rep(3, 100))
test = data.frame(dat = dat, g = g)
qplot(dat, fill = as.factor(g), data = test, geom="histogram")
#LLfunc
LLBeta = function(params, dat) {
sumLogX = sum(log(  dat  ))
sumLogOneMinusX = sum(log(1 - dat))
n = length(dat)
toReturn = (params[1] - 1) * sumLogX + (params[2] - 1) *
sumLogOneMinusX - n * log(beta(params[1], params[2]))
return(-toReturn)
}
params = matrix(rep(0, 6), nrow = 3)
params[1,] = optim(c(10,10), LLBeta, dat = a)$par
params[2,] = optim(c(10,10), LLBeta, dat = b)$par
params[3,] = optim(c(10,10), LLBeta, dat = c)$par
params
#stores groups
g = rep(0, 450)
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
g
params
params[1,] = c(15, 3)
params[2,] = c(40, 40)
params[3,] = c(3, 25)
#stores groups
g = rep(0, 450)
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
g
for(i in 1:5) {
##recalculate group assignment
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
}
g
params
params[1,] = c(15, 3)
params[2,] = c(40, 40)
params[3,] = c(3, 25)
params
g
g = rep(0, 450)
g
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
g
##calculate group parameters
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
params
for(i in 1:length(dat)) {
a = -LLBeta(params[1,], dat[i])
b = -LLBeta(params[2,], dat[i])
c = -LLBeta(params[3,], dat[i])
g[i] = which.max(c(a,b,c))
}
for(i in 1:3) {
dat2 = dat[g == i]
par = optim(c(10,10), LLBeta, dat = dat2)$par
params[i, ] = par
}
g
params
getwd()
cite
cite("MASS")
cite
cite(ggplot2)
cite("ggplot2")
cite(package="mass")
cite(package="MASS")
cite(package="base")
citation(package="MASS")
part = c(rep(1, 6), rep(2, 6), rep(3, 6), rep(4, 6))
op = rep(c(1,1,2,2,3,3), 4)
m = c(.52, .52, .54, .53,
.55, .55, .56, .55,
.54, .54, .55, .56,
.57, .56, .55, .56,
.57, .57, .55, .55,
.54, .55, .56, .55)
dat = data.frame(part = part, operator = op, peanut = m)
dat
lm(peanut ~ as.factor(operator) + as.factor(part), data = dat)
q = lm(peanut ~ as.factor(operator) + as.factor(part), data = dat)
summary(q)
anova(q)
dat
str(dat)
part = c(rep(1, 6), rep(2, 6), rep(3, 6), rep(4, 6))
op = rep(c(1,1,2,2,3,3), 4)
m = c(.52, .52, .54, .53,
.55, .55, .56, .55,
.54, .54, .55, .56,
.57, .56, .55, .56,
.57, .57, .55, .55,
.54, .55, .56, .55)
dat = data.frame(part = part, operator = op, peanut = m)
dat$part = as.factor(dat$part)
dat$operator = as.factor(dat$operator)
dat
g = lm(peanut ~ part + operator)
g = lm(peanut ~ part + operator, data = dat)
g
anova(g)
g = lm(peanut ~ part*operator, data = dat)
anova(g)
devtools::install_github("rstudio/rmarkdown")
library(dplyr)
devtools::install_github(c("rstudio/rmarkdown", "rstudio/ggvis"),
build_vignettes = FALSE)
devtools::install_github("hadley/dplyr")
%>%
group_by()
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
?ggvis::add_legend
67^1.12
67^1.12 * 3
efford = 67 ^ 1.12 * 3
effort = 67 ^ 1.12 * 3
duration = 2.5 * effort ^ 0.35
duration
effort
effort / duration
17*19*10000
effort * 10000
17.441 * 19.08771 * 10000
87 ^ 1.05 * 2.4
87000/261.0396
87000/261.0396 / 30
87000/(261.0396 / 30)
87000/(261.0396)
87000/(261.0396) / 20
PM = 3.6 * 99 ^ 1.2
PM
(99000 / PM) / 20
87000 / (87 ^ 1.05 * 2.4)
333.2827/20
PM = 2.4 * 250^1.05
PM
TDEV = 2.5 * PM ^0.38
TDEV
PM / TDEV
99 ^ 1.2 * 3.6
PM = 99 ^ 1.2 * 3.6
99000 / PM
(99000 / PM)/ 20
PM = 250 ^ 1.05 * 2.4
PM
choose(5,2)
choose(3,0)
0!
factorial(0)
test = function(t) {choose(t - 1, t - 4) * 0.5 ^ t }
test(3)
test(4)
0.5^4
test(4) + test(5) + test(6) + test(7) + test(8)
test(8)
choose(8, 4) * 0.5^8
choose(8, 4) * 0.5^8 + choose(8, 5) * 0.5^8 + choose(8, 6) * 0.5^8 + choose(8, 7) * 0.5^8   + choose(8, 8) * 0.5^8
setwd("~/GitHub/ALShum.github.io/knitr")
knit("albania.Rmd")
library(knitr)
knit("albania.Rmd")
knit("albania.Rmd")
setwd("~/GitHub/ALShum.github.io/knitr")
setwd("~/GitHub/ALShum.github.io/knitr")
knit("albania.Rmd")
knit("albania.Rmd")
knit("albania.Rmd")
setwd("~/GitHub/ALShum.github.io/knitr")
knit("albania.Rmd")
