" (", 1 - input$partition_prop_training, ")", sep = ""))
})
# model summary
rct_txt_model <- reactive({
txt_input <- c("  Input:", str_join("    variable:", input$ipt_variable, sep = " "))
txt_output <- c("  Output:", str_join("    variable:", input$opt_variable, sep = " "))
if (is.null(rct_model())) {
model_slope <- NA
model_intercept <- NA
} else {
model_intercept <- coef(rct_model())[1]
model_slope <- coef(rct_model())[2]
}
txt_model <- c("Model:", txt_input, txt_output, "  Coefficients:",
str_join("    intercept:", format(model_intercept, digits = 5), sep = " "),
str_join("    slope:    ", format(model_slope, digits = 5), sep = " "))
txt_model
})
rct_txt_assess = reactive({
data_assess = rct_data_assess()
if(is.null(data_assess)) return ("")
get_miss_rate = function(x) {
rct_data_assess()[rct_data_assess()$partition_ == x, ]$prop_unexplained
}
txt_assess = c("Assessment: ",
str_join("  proportion variance unexplained - training:",
format(get_miss_rate("training"), digits = 7),
sep = " "),
str_join("  proportion variance unexplained - test:    ",
format(get_miss_rate("test"), digits = 7),
sep = " "))
})
#main text summary
rct_text_summary <- reactive({
txt <- c(
rct_txt_partition(), "",
rct_txt_model(), "",
rct_txt_assess()
)
str_join(txt, collapse = "\n")
})
} #END TEXT SUMMARY
{ #MODEL GENERATION
#trains LM from training data
rct_model = reactive({
data_ = rct_data_()
invalid_input = .is_invalid(data_$partition_) ||
.is_invalid(data_$output_) ||
.is_invalid(data_$input_)
if(invalid_input) return(NULL)
data_training = data_ %>% filter(partition_ == "training")
lm(output_ ~ input_, data = data_training)
})
#predicts y_hat from training model
rct_y_pred = reactive({
model_ = rct_model()
data_ = rct_data_()
if(is.null(model_)) return(NULL)
coef(model_)[1] + coef(model_)[2] * data_$input_
})
#stores previous models that were fit
rv_model_history = reactiveValues(count = 0, lines = data.frame(), prev_x = "", prev_y = "")
#clears rv_model_history when new variables selected
rct_clear_history = reactive({
rct_ipt_()
rct_opt_()
input$line_clear
isolate({
rv_model_history$count = 0
rv_model_history$lines = data.frame()
rv_model_history$lines
})
})
#updates rv_model_history
rct_update_history = reactive({
input$partition_resample
input$model_resample
input$assess_resample
input$line_clear
rct_clear_history()
isolate({
rv_model_history$count = rv_model_history$count + 1
rv_model_history$lines = rbind(rv_model_history$lines,
data.frame(x_ = rct_cur_reg()$x_,
y_ = rct_cur_reg()$y_,
groups = rep(rv_model_history$count, 2))
)
rv_model_history$lines
})
})
#returns end points of regression line for current training set
#only use this for the current regression line
#there is a separate reactive to record regression lines
rct_cur_reg = reactive({
model_ = rct_model()
data_ = rct_data_()
xmin_ = min(data_$input_)
xmax_ = max(data_$input_)
ymin_ = coef(model_)[1] + coef(model_)[2] * xmin_
ymax_ = coef(model_)[1] + coef(model_)[2] * xmax_
if(is.na(ymin_) || is.na(ymax_)) {
ymin_ = 0
ymax_ = 0
}
data.frame(x_ = c(xmin_, xmax_), y_ = c(ymin_, ymax_))
})
} #END MODEL GENERATION
{ #MODEL ASSESSMENT
# updates model assessment
rct_data_assess = reactive({
data_ = rct_data_()
model = rct_model()
if(.is_invalid(data_$partition_) ||
.is_invalid(data_$output_)    ||
is.null(model)) return (NULL)
data_$predict_ = rct_y_pred()
#for numerical issues
if(is.null(input$opt_variable) || is.null(input$ipt_variable) ||
input$opt_variable == input$ipt_variable) {
data_assess = data.frame(partition_ = c("test", "training"), prop_unexplained = c(0, 0))
}
else {
data_assess = data_ %>%
group_by(partition_) %>% mutate(overall_mean = mean(output_)) %>%
mutate(SSmodel = (predict_ - overall_mean)^2) %>%
mutate(SSerror = (output_ - predict_)^2) %>%
summarise(explained = sum(SSmodel),
unexplained = sum(SSerror),
total = sum(SSmodel) + sum(SSerror)) %>%
group_by(partition_) %>% summarise(prop_unexplained = unexplained / total)
}
data_assess
})
} #END MODEL ASSESSMENT
# data tab - data_description #
output$data_description = renderText(renderMarkdown(text = attr(data, "description")))
output$data_dictionary = renderPrint({
tmp = "No dictionary available"
if (!is.null(dict)){
tmp <- get_dict_wide(dict) %>% select(name_col, description, units)
}
tmp
})
output$data_head = renderPrint({data %>% head})
output$data_glimpse = renderPrint({glimpse(data, width = 80)})
output$data_summary = renderPrint({data %>% summary})
# end data tab #
# partition tab - training/test #
output$txt_summary_partition = rct_text_summary
#partition screen vis
rct_data_ %>% ggvis(x = ~key_, y = ~partition_, fill = ~partition_) %>%
layer_points(
size := input_slider(10, 100, label = "Size of points"),
fillOpacity := input_slider(0, 1, label = "Opacity of points")) %>%
add_axis("x", title = "observation number") %>%
add_axis("y", title = "partition") %>%
scale_nominal("fill", domain = c("test", "training"), range = c("black", "red")) %>%
#        set_options(width = .width, height = .height) %>%
bind_shiny("gg_partition", controls_id = "gg_partition_ui")
# end partition tab #
# model tab - choose vars #
output$txt_summary_model = rct_text_summary
rct_data_ %>% ggvis() %>%
layer_points(x = ~input_, y = ~output_, fill = ~partition_,
size := input_slider(10, 100, label = "Size of points"),
fillOpacity := input_slider(0, 1, label = "Opacity of points")) %>%
scale_nominal("fill", domain = c("test", "training"), range = c("black", "red")) %>%
add_data(rct_cur_reg) %>% layer_lines(x = ~x_, y = ~y_, stroke := "red", strokeWidth := 3) %>%
add_data(rct_update_history) %>% group_by(groups) %>%
layer_lines(x = ~x_, y = ~y_,
strokeWidth := input_slider(1, 10, label = "Line width"),
strokeOpacity := input_slider(0, 1, label = "Opacity of line")) %>%
bind_shiny("gg_model", controls_id = "gg_model_ui")
# end model tab #
# assessment tab - model error assessment #
output$txt_summary_assess = rct_text_summary
rct_data_assess %>% ggvis(x = ~partition_, y = ~prop_unexplained, fill = ~partition_) %>%
layer_bars() %>% scale_nominal("x", domain = c("training", "test")) %>%
scale_nominal("fill", domain = c("test", "training"), range = c("black", "red")) %>%
bind_shiny("gg_assess")
# end assessment tab #
}, #server
options = list(width = "100%", height = height)
) #shinyApp
}#wgt_regression
wgt_regression(mtcars)
grades = read.csv("midterm_grades.csv")
head(grades)
names(grades)
lab = grades[,21]
lab
online = grades[,50:56]
online
head(online)
35+37+37+20+27+32+29
names(grades)
lab = grades[,21]
online = grades[,50:56]
written = grades[,33]
quiz = grades[,34:38]
written
max(written)
max(written, na.rm = T)
head(quiz)
lab = grades[,21]
online = grades[,50:56]
written = grades[,33]
quiz = grades[,34:38]
unit1 = grades[,72]
grades[is.na(grades)]
grades[is.na(grades)] = 0
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
written = grades[,33]
quiz = grades[,34:38]
unit1 = grades[,72]
lavb
lab
written
max(written)
max(online)
online
head(online)
apply(online,sum,2)
apply(online,2,sum)
apply(online,1,sum)
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online,1,sum)
written = grades[,33]
quiz = grades[,34:38]
unit1 = grades[,72]
lab
online
max(online)
rownames(grades)
head(grades)
names(grades)
grades[,1]
lab
online
written
quiz
quiz = apply(quiz, 1, sum)
quiz
unit1 = grades[,72]
unit1
p = 0.07 * lab + 0.07 online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = 0.07 * lab + 0.07 online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
0.07 * lab + 0.07 online + 0.07 * written
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
p
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final
final[order(final$p),]
final[final$p <= 60, ]
nrow(final[final$p <= 60, ])
lab
written
quiz
nrow(final[final$p <= 73, ])
unit1
online
head(grades[,50:56])
grades[,33]
final
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$grade <= 0.73]$grade = "C-"
final[final$grade <= 0.70]$grade = "D"
final[final$grade <= 0.60]$grade = "F"
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$grade <= 0.73,]$grade = "C-"
final[final$grade <= 0.70,]$grade = "D"
final[final$grade <= 0.60,]$grade = "F"
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 0.73,]$grade = "C-"
final[final$p <= 0.70,]$grade = "D"
final[final$p <= 0.60,]$grade = "F"
final
final[final$p <= 0.73,]
final[final$p <= 0.70,]$
final[final$p <= 0.70,]
final$p
final$p <= 0.73
final$p < 0.73
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab + 0.07 * online + 0.07 * written + 0.05 * quiz + 0.4 * unit1
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 73,]$grade = "C-"
final[final$p <= 70,]$grade = "D"
final[final$p <= 60,]$grade = "F"
final
38/97
grades[32,]
labs[32,]
lab[32,]
lab[32]
online[32]
written[32]
final
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab/180 + 0.07 * online/225 + 0.07 * written/142 + 0.05 * quiz/50 + 0.4 * unit1/50
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 73,]$grade = "C-"
final[final$p <= 70,]$grade = "D"
final[final$p <= 60,]$grade = "F"
final
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * lab/180 + 0.07 * online/225 + 0.07 * written/142 + 0.05 * quiz/50 + 0.4 * unit1/50
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 0.73,]$grade = "C-"
final[final$p <= 0.70,]$grade = "D"
final[final$p <= 0.60,]$grade = "F"
grades
final
rownames(final[final$p < 0.73,])
nrows(final[final$p < 0.73,])
dim(final[final$p < 0.73,])
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * (lab/180) + 0.07 * (online/225) + 0.07 * (written/142) + 0.05 * (quiz/50) + 0.4 * (unit1/50)
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 0.73,]$grade = "C-"
final[final$p <= 0.70,]$grade = "D"
final[final$p <= 0.60,]$grade = "F"
dim(final[final$p < 0.73,])
final
final[final$grade !="okay",]
test = final[final$grade !="okay",]
test[order(test$grade),]
dim(test)
data = read.table("pirates.txt", header=TRUE)
data$Pirates = data$Pirates/1000
qplot(Pirates, Global_Temperature, data = data) + stat_smooth(method="lm", se=FALSE)
xbar = mean(data$Global_Temperature)
ybar = mean(data$Pirates)
sx = sd(data$Global_Temperature)
sy = sd(data$Pirates)
r = cor(data$Global_Temperature, data$Pirates)
library(ggplot2)
set.seed(31)
df = rpois(100, 20)
df[df < 12] = df[df < 12] * 3
df[df < 15] = df[df < 15] * 2 + 1
dat = as.list(summary(df))[-4]
names(dat) = c("Min", "Q1", "Median", "Q3", "Max")
dat = as.data.frame(dat)
dat2 = data.frame(mean = mean(df), standard.deviation = sd(df))
dat
dat2
24.2-19
5.2*1.5
24.2+7.8
data
24+22
51-22
30/12
pz
pnorm
pnorm(0.5, 22, 12)
pnorm(22, 22, 12)
pnorm(31, 22, 12)
pnorm(52, 22, 12)
48-22
26/12
pnorm(26, 22, 12)
pnorm(48, 22, 12)
pnorm(54, 33, 10)
pnorm(47, 22, 12)
pnorm(54, 33, 10)
pnorm(53, 33, 10)
22+12+12
grades = read.csv("midterm_grades.csv")
grades[is.na(grades)] = 0
lab = grades[,21]
online = grades[,50:56]
online = apply(online, 1, sum)
written = grades[,33]
quiz = grades[,34:38]
quiz = apply(quiz, 1, sum)
unit1 = grades[,72]
p = 0.07 * (lab/180) + 0.07 * (online/225) + 0.07 * (written/142) + 0.05 * (quiz/50) + 0.4 * (unit1/50)
p = p/0.66
final = data.frame(last = grades[,1], first = grades[,2], user = grades[,3], p)
final$grade = "okay"
final[final$p <= 0.73,]$grade = "C-"
final[final$p <= 0.70,]$grade = "D"
final[final$p <= 0.60,]$grade = "F"
head(final)
getwd()
setwd("~/GitHub/ALShum.github.io/knitr")
knit("2014-11-16-sublime.Rmd")
library(knitr)
knit("2014-11-16-sublime.Rmd")
knit("2014-11-16-sublime.Rmd")
knit("2014-11-16-sublime.Rmd")
